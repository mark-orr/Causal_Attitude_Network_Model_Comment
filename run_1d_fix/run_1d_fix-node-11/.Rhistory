rm(list=ls())
data.name <- "n150000p85."
s <- 1 #NUMBER OF EXAMPLE SETS
n <- 75000 #NUMB OF EXAMPLES PER FACE
p <- 0.85 #PROB WANTED FOR 1s and 1- for 0s
#LEFT CUBE
for (i in 1:s) { #KEEP i incase want to run mutiple Example sets
tmp <- data.frame(rep(NA,n))
#LEFT FACING CUBE-LEFT NODES (1s for left)
tmp$l1 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$l2 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$l3 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$l4 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$l5 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$l6 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$l7 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$l8 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
#LEFT FACING CUBE-RIGHT NODES (0s for right)
tmp$r1 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$r2 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$r3 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$r4 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$r5 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$r6 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$r7 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$r8 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
#CLEAN
x <- tmp[,-1]
assign(paste("left.face.",data.name,i,sep=""), x)
}
#RIGHT CUBE
for (i in 1:s) { #KEEP i incase want to run mutiple Example sets
tmp <- data.frame(rep(NA,n))
#RIGHT FACING CUBE-LEFT NODES (0s for left)
tmp$l1 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$l2 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$l3 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$l4 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$l5 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$l6 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$l7 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
tmp$l8 <- sample(c(0,1),n,replace=TRUE,prob=c(p,(1-p)))
#RIGHT FACING CUBE-RIGHT NODES (1s for right)
tmp$r1 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$r2 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$r3 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$r4 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$r5 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$r6 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$r7 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
tmp$r8 <- sample(c(0,1),n,replace=TRUE,prob=c((1-p),p))
#CLEAN
x <- tmp[,-1]
assign(paste("right.face.",data.name,i,sep=""), x)
}
#MERGE TWO FILES
#both.face.1 <- rbind(left.face.1,right.face.1)
assign(paste("both.face.",data.name,i,sep=""),
rbind(get(paste("right.face.",data.name,i,sep="")),
get(paste("left.face.",data.name,i,sep=""))))
#PERMUTE
#both.face.perm.1 <- both.face.1[sample(nrow(both.face.1)),]
assign(paste("both.face.perm.",data.name,i,sep=""),
get(paste("both.face.",data.name,i,sep=""))[sample(nrow(get(paste("both.face.",data.name,i,sep="")))),])
#MAKE LENS FILES
#AND ISING FIT FILES
#DANGER
#DANGER
#DANGER  MUST MAKE SURE FILE DOES NOT EXIST BEFORE MAKING, IS USING APPEND
#MAKE ISING FIT INPUT DATA STRUCTURE
#write.csv(both.face.perm.1,file="both_face_perm_1.csv",quote=FALSE,sep=",",row.names=FALSE)
write.csv(get(paste("both.face.perm.",data.name,i,sep="")),
file=paste("both_face_perm_",data.name,i,".csv",sep=""),quote=FALSE,sep=",",row.names=FALSE)
#MAKE LENS FILES
u <- 16 #Number of units in nnet
#s from above and is i again
#n.2 is restated here (compared to above as n) and is j and is total number of examples in both faces together
n.2 <- length(get(paste("both.face.perm.",data.name,i,sep=""))[,1])
for (i in 1:s) {
for(j in 1:n.2) {
y <- paste("name: sit",j,sep="")
write(as.character(y),ncolumns=1+u+1,file=paste("both.face.perm.",data.name,i,".ex",sep=""),append=TRUE)
o <- get(paste("both.face.perm.",data.name,i,sep=""))[j,]
z <- c("B:",o,";")
write(as.character(z),ncolumns=1+u+1,file=paste("both.face.perm.",data.name,i,".ex",sep=""),append=TRUE)
}
}
#EOF
getwd
getwd()
load("~/Projects/SocioCognitiveModeling/NSF-NetCogSys/Products/CAN_Model/CAN_GitRepo/IsingFitStudy/Hopfield/Simulations/run_1dev/Graphs/Reagan1984.Rdata")
View(Reagan1984)
names(Reagan1984)
load("Reagan1984.Rdata")
my_data <- na.omit(Reagan1984)
my_fit <- IsingFit(my_data)
origbias <- my_fit$thresholds
rm(list = ls())
setwd("Graphs/")
library(qgraph)
library(IsingFit)
library(igraph)
library(reshape2)
library(ggplot2)
load("Reagan1984.Rdata")
my_data <- na.omit(Reagan1984)
my_fit <- IsingFit(my_data)
origbias <- my_fit$thresholds
load("Reagan1984.Rdata")
my_data <- na.omit(Reagan1984)
setwd("~/Projects/SocioCognitiveModeling/NSF-NetCogSys/Products/CAN_Model/CAN_GitRepo/IsingFitStudy/Hopfield/Simulations/run_1dev/Graphs")
rm(list = ls())
setwd("Graphs/")
library(qgraph)
library(IsingFit)
library(igraph)
library(reshape2)
library(ggplot2)
load("Reagan1984.Rdata")
my_data <- na.omit(Reagan1984)
my_fit <- IsingFit(my_data)
origbias <- my_fit$thresholds
origbias
my_fit
