import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import random

#FROM HEAD
def compute_sgn_rate(x,t):
    '''
    COMPUTES PSEUDO SIGN FUNCTION FOR RATE NEURON FORMULATION
    x is assumed to be an np.floatX of one dimension and one element 
    x should be the sum of h_t
    t is the threshoLd for the neuron
    '''
    x_2 = 1 if x > t else 0

    return x_2

#U Matrix of anti0Ferromagnet
def make_U_antiferrous_rate(n_p,n_n):
    '''
    RETURNS MATRIX OF PATTERNS IN
    SHAPE OF ANTIFERRO MAGNET
    n_p is number of patterns
    n_n is number of units/neuros
    NOTE: THIS IS THE RATE VERSION WITH BINARY {0,1} UNITS
    '''
    X_a = np.array([1,0])
    n = int(n_n/2)
    X_b = np.hstack([X_a]*n)
    X = np.vstack([X_b]*n_p)
    return X  

def make_W_rate(m):
    '''
    RETURNS A HEBBIAN WT MATRIX
    m is matrix of patterns (see make_U)
    NOTE: FOR THE RATE MODEL WITH BINARY {0,1} NEURONS
    '''
    a = m.shape[0] #number of patterns
    b = m.shape[1] #number of nodes
    mat_collect = np.zeros((b,b))
                
    for i in range(0,a):
        m_x = m.copy()
        m_x = m_x*2 - 1
        mat_tmp = np.outer(m_x[i],m_x[i].transpose())
        mat_tmp = (1/b) * mat_tmp
        mat_collect = mat_collect + mat_tmp
    
    return mat_collect

def sim_patt_U_rate(v1,wts,n_u):
    '''
    RETURNS A HISTORY OF A SIM OF ONE PATTERN
    AND OVERWRITES S[i] n_u TIMES BY v1
    v1 is the initialization or input state vector
    wts is a weight vector between elements of v1
    n_u is number of updates to the system; in i for loop below
    
    *GENERATED BELOW:
       n_n is the number of units/neuros in v1
       v2 is the ordered index of v1
       The i loop:
           Is the loop over the number of random unit updates
           Where S_i is a single neuron updates
           The j loop:
               Is the computation of h_t for a single neuron update
               In_j is computing one interaction i <- j between two
               neurons, h_t is the sum across j.
               
    '''
    n_n = len(v1)
    v2 = np.arange(n_n)
    S_hist = v1.copy()

    for i in np.random.randint(0,n_n,n_u):
        #print("SHISTLOOP, i:",i)
        S_i = v1[i].copy()
        
        h_t = np.zeros(1)
    
        for j in v2[np.logical_not(np.in1d(v2,i))]:
        
            In_j = wts[i,j]*v1[j]
            h_t = np.append(h_t,In_j)
        
        v1[i] = compute_sgn_rate(h_t.sum(),0)
        
        S_hist = np.vstack((S_hist,v1))
        
    return S_hist

#EOF
